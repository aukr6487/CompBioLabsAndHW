### PART 1 ###
### Step #3 ###
# c = number of delicious flaming hot cheetos
# g = number of guests
c <- 5
g <- 8
## Step #5 ##
# a = average amount of chips a guest will eat
a <- 0.4
## Step #7 ##
# l = expected amount of chips leftover
l <- c - ((g * a) + 0.4)
### PART 1 ###
## Step #3 ##
# b = number of delicious flaming hot cheetos
# g = number of guests
b <- 5
g <- 8
## Step #5 ##
# a = average amount of chips a guest will eat
a <- 0.4
## Step #7 ##
# l = expected amount of chips leftover
l <- c - ((g * a) + 0.4)
## Step #7 ##
# l = expected amount of chips leftover
l <- b - ((g * a) + 0.4)
clear
clr
### PART 2 ###
## Step #8 ##
# rankings of star wars movies 1-9 for me (m), Penny (p), Lenny (l), and Stewie (s)
m <- c(7, 9, 8, 1, 2, 3, 4, 6, 5)
p <- c(5, 9, 8, 3, 1, 2, 4, 7, 6)
s <- c(1, 9, 5, 6, 8, 7, 2, 3, 4)
l <- c(6, 5, 4, 9, 8, 7, 3, 2, 1)
## Step #9 ##
PennyIV <- p[4]
LennyIV <- l[4]
## Step #10 ##
# rankings = matrix of star wars rankings
rankings <- cbing(m, p, l, s)
## Step #10 ##
# rankings = matrix of star wars rankings
rankings <- cbind(m, p, l, s)
View(rankings)
### PART 1 ###
## Step #3 ##
# x = number of delicious flaming hot cheetos
# y = number of guests
x <- 5
y <- 8
## Step #5 ##
# a = average amount of chips a guest will eat
a <- 0.4
## Step #7 ##
# z = expected amount of chips leftover
z <- x - ((y * a) + 0.4)
### PART 2 ###
## Step #8 ##
# rankings of star wars movies 1-9 for Me, Penny, Lenny, and Stewie
Me <- c(7, 9, 8, 1, 2, 3, 4, 6, 5)
Penny <- c(5, 9, 8, 3, 1, 2, 4, 7, 6)
Lenny <- c(6, 5, 4, 9, 8, 7, 3, 2, 1)
Stewie <- c(1, 9, 5, 6, 8, 7, 2, 3, 4)
## Step #9 ##
# PennyIV = Penny's ranking for Episode 4
# LennyIV = Lenny's ranking for Episode 4
PennyIV <- Penny[4]
LennyIV <- Lenny[4]
## Step #10 ##
# rankings = matrix of star wars rankings
rankings <- cbind(Me, Penny, Lenny, Stewie)
## Step #11 ##
str(PennyIV)
str(Penny)
str(rankings)
## Step #12 ##
data.frame(Me,Penny,Lenny,Stewie)
## Step #12 ##
# making data frame (df) using the 4 vectors of rankings
df <- data.frame(Me,Penny,Lenny,Stewie)
# trying another command to make data frame (df2) using the 4 vectors of rankings
df2 <- as.data.frame(Me, Penny, Lenny, Stewie)
# trying another command to make data frame (df2) using the 4 vectors of rankings
df2 <- as.data.frame(Me)
# trying another command to make data frame (df2) using the 4 vectors of rankings
df2 <- as.data.frame((Me, Penny, Lenny, Stewie))
# trying another command to make data frame (df2) using the 4 vectors of rankings
df2 <- as.data.frame(df)
# trying another command to make data frame (df2) using the 4 vectors of rankings
as.data.frame(df)
rankings == df
dim(rankings)
dim(df)
# Both "df" and "rankings" are a 9x4 matrix, consisting of the same values
str(rankings)
# Both "df" and "rankings" are a 9x4 matrix, consisting of the same values
str(df)
# Both "df" and "rankings" are a 9x4 matrix, consisting of the same values.
# The object "rankings" is technically a structre of numbers, and "df" is a
# data frame consisting of 9 obs. of 4 variables.
typeof(df)
# Both "df" and "rankings" are a 9x4 matrix, consisting of the same values.
# The object "rankings" is technically a structre of numbers, and "df" is a
# data frame consisting of 9 obs. of 4 variables.
typeof(rankings)
# Both "df" and "rankings" are a 9x4 matrix, consisting of the same values.
# The object "rankings" is technically a structure of numbers, and "df" is a
# data frame consisting of 9 obs. of 4 variables. "rankings" is also stored as a
typeof(rankings)
## Step #14 ##
Episodes <- c("I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX")
## Step #15 ##
rankings(row.names(Episodes))
## Step #15 ##
row.names(rankings) <- Episodes
View(rankings)
View(rankings)
row.names(df) <- Episodes
View(df)
View(df)
## Step #16 ##
rankings[3,]
## Step #17 ##
# printing the 4th column of "df" which is Stewie's rankings of the movies
df[,4]
## Step #18 ##
# accessing my ranking for Episode V
rankings[5,1]
View(rankings)
View(rankings)
View(rankings)
View(rankings)
## Step #19 ##
# accessing Penny's ranking for Episode II
rankings[2,2]
## Step #20 ##
# accessing everyone's rankings for episodes IV-VI
rankings[4:6,]
## Step #21 ##
# accessing everyone's rankings for episodes II, V, & VII
rankings[c(2,5,6),]
## Step #22 ##
# access rankings for Penny & Stewie for episodes IV and VI
rankings[c(4,6),c(2,4)]
## Step #23 ##
# swap Lenny's rankings for Episodes II and V
# rank = Lenny's rankings for Episode II
rank = rankings[3,2]
## Step #23 ##
# swap Lenny's rankings for Episodes II and V
# rank = Lenny's rankings for Episode II
rank = rankings[2,3]
rankings[2,3] <- rankings[5,3]
View(rankings)
View(rankings)
rankings[5,3] <- rank
View(rankings)
View(rankings)
## Step #24 ##
# access Penny's rating of Episode III
allRankings["III", "Penny"]
## Step #24 ##
# access Penny's rating of Episode III
rankings["III", "Penny"]
View(rankings)
View(rankings)
df["III", "Penny"]
## Step #25 ##
rank2 = rankings["II", "Lenny"]
rankings["II", "Lenny"] <- rankings["V", "Lenny"]
rankings["V", "Lenny"] <- rank2
View(rankings)
View(rankings)
## Step #26 ##
# swapping AGAIN Lenny's rankings for Episdoes II and V
rank3 <- df$Lenny[2]
df$Lenny[2] <- df$Lenny[5]
df$Lenny[5] <- rank3
View(rankings)
View(rankings)
View(df)
View(df)
t <- c(80, 20, 40, 60, 100)
y <- 5000 * (1.005^t)
for (i in 5) {
print(hi)
}
for (i in 5) {
print("hi")
}
for (1 in 5) {
print("hi")
}
for (1 in 5) {
print("hi")
}
for (1 in 5) {
print("hi")
}
for (1 in five) {
print("hi")
}
five = 1:5
for (1 in five) {
print("hi")
}
for (1 in 1:5) {
print("hi")
}
for (i in 1:5) {
print("hi")
}
for (i in 1:5) {
print(i)
}
# for loop printing numbers 1 to 5
for (i in 1:5) {
print(i)
}
for (i in 1:10){
print("hi")
}
piggyBank <- 10 # dollars
allowance <- 5 # dollars per week
expenses <- 2 * 1.34 # dollars per week
weeks <- 8
for (i in 1:8){
piggyBank <- piggyBank + allowance - expenses
print( piggyBank )
}
shrinkingRate <- 0.05 # 5% rate
currentPopulation <- 2000 # individuals
years <- 7
for (i in 1:7){
currentPopulation <- currentPopulation*shrinkingRate
print( currentPopulation )
}
shrinkingRate <- 0.05 # 5% rate
currentPopulation <- 2000 # individuals
years <- 7
for (i in 1:7){
currentPopulation <- currentPopulation - currentPopulation*shrinkingRate
print( currentPopulation )
}
currentPopulation <- 2500 # population abundance
K <- 10000 # environmental carrying capacity for the population
r <- 0.8 # intrinsic growth rate of the population
for (i in 1:12){
currentPopulation <- currentPopulation + (r * currentPopulation * (K - currentPopulation)/K)
print( currentPopulation )
}
timeStep <- 12 # predicting population at t = 12
shrinkingRate <- 0.05 # 5% rate
currentPopulation <- 2000 # individuals
years <- 7
for (i in 1:years){
currentPopulation <- currentPopulation - currentPopulation*shrinkingRate
print( currentPopulation )
}
for (i in 1:years){
currentPopulation <- currentPopulation - currentPopulation*shrinkingRate
print( currentPopulation )
}
population <- 2500 # population abundance
K <- 10000 # environmental carrying capacity for the population
r <- 0.8 # intrinsic growth rate of the population
timeStep <- 12 # predicting population at t = 12
for (i in 1:timeStep){
population <- population + (r * population * (K - population)/K)
print( population )
}
K <- 10000 # environmental carrying capacity for the population
# Step 1
# A for loop that prints the word "hi" 10 times
hiTimes <- 10
# Aubrey Kroger
# EBIO 5420
# Lab04
# PART I #
# Step 1
# A for loop that prints the word "hi" 10 times
hiTimes <- 10
for (i in 1:hiTimes){
print("hi")
}
# Step 2
# For loop calcuating the total amount of money Tim has
piggyBank <- 10 # dollars
allowance <- 5 # dollars per week
expenses <- 2 * 1.34 # dollars per week
weeks <- 8
for (i in 1:weeks){
piggyBank <- piggyBank + allowance - expenses
print( piggyBank )
}
# Step 3
# For loop calculating expected population size
shrinkingRate <- 0.05 # 5% rate
currentPopulation <- 2000 # individuals
years <- 7
for (i in 1:years){
currentPopulation <- currentPopulation - currentPopulation*shrinkingRate
print( currentPopulation )
}
# Step 4
# For loop calculating population abundance using discrete-time logistic growth equation
population <- 2500 # population abundance
K <- 10000 # environmental carrying capacity for the population
r <- 0.8 # intrinsic growth rate of the population
timeStep <- 12 # predicting population at t = 12
for (i in 1:timeStep){
population <- population + (r * population * (K - population)/K)
print( population )
}
# Part II #
# Step 5a
# Making vector of 18 zeros
vector <- rep(0, 18)
# Step 5a
# Making vector of 18 zeros
zeros <- 18 # number of zeros in vector
vector <- rep(0, zeros)
print( vector )
for ( i in seq(1,18)) {
vector[i] <- 3 * i
}
for ( i in seq(1,18)) {
vector[i] <- 3 * i
}
print( vector )
# Step 5a
# Making vector of 18 zeros
zeros <- 18 # number of zeros in vector
vector <- rep(0, zeros)
print( vector )
# Step 5b
for ( i in seq(1,18)) {
vector[i] <- 3 * i
}
print( vector )
vectorTwo <- rep(0, zeros)
vectorTwo[1] <- 1
vectorTwo <- rep(0, zeros)
vectorTwo[1] <- 1
print( vectorTwo )
# Step 5d
for (i in seq(2, 18)) {
vectorTwo[i] <- 1 + (2 * vectorTwo[i-1])
}
print( vectorTwo )
length <- 20 #length of fibVector
fibVector <- rep(0, length)
fibVector[1] <- 0 # First number of Fibonacci sequence is zero
fibVector[2] <- 1 # Second number of Fibonacci sequence is one
for (i in 3:length) {
fibVector[i] <- fibVector[i - 1] + fibVector[i - 2]
}
# Should print first 20 Fibonacci numbers starting at 0
print( fibVector )
# Step 7
# defining variables
timeStep <- 12 # length of time vector and abundance vector
abundance <- rep(0, timeStep)
time <- rep(0, timeStep)
K <- 10000 # environmental carrying capacity for the population
r <- 0.8 # intrinsic growth rate of the population
# define starting values in both vectors
abundance[1] <- 2500 # population abundance at time t=1
time[1] <- 1 # time starts at t = 1
# For loop calculating population abundance using discrete-time logistic growth equation
for (i in 2:timeStep){
abundance[i] <- abundance[i - 1] + (r * abundance[i - 1] * (K - abundance[i - 1])/K)
time[i] <- time[i - 1] + 1 # increase time
}
print(abundance)
print(time)
# Step 7
# defining variables
timeStep <- 12 # length of time vector and abundance vector
abundance <- rep(0, timeStep)
time <- rep(0, timeStep)
K <- 10000 # environmental carrying capacity for the population
r <- 0.8 # intrinsic growth rate of the population
# define starting values in both vectors
abundance[1] <- 2500 # population abundance at time t=1
time[1] <- 1 # time starts at t = 1
# For loop calculating population abundance using discrete-time logistic growth equation
for (i in 2:timeStep){
abundance[i] <- abundance[i - 1] + (r * abundance[i - 1] * (K - abundance[i - 1])/K)
time[i] <- time[i - 1] + 1 # increase time
}
# plot population abundance over time
plot(time, abundance)
timeStep <- 12 # length of time vector and abundance vector
abundance <- rep(0, timeStep)
time <- rep(0, timeStep)
K <- 10000 # environmental carrying capacity for the population
r <- 0.8 # intrinsic growth rate of the population
# define starting values in both vectors
abundance[1] <- 2500 # population abundance at time t=1
time[1] <- 1 # time starts at t = 1
# For loop calculating population abundance using discrete-time logistic growth equation
for (i in 2:timeStep){
abundance[i] <- abundance[i - 1] + (r * abundance[i - 1] * (K - abundance[i - 1])/K)
time[i] <- time[i - 1] + 1 # increase time
}
# plot population abundance over time
plot(time, abundance)
# Step 8a
read.csv(CO2_data_cut_paste)
setwd("~/Desktop/Classes/EBIO_5420/CompBioLabsAndHW/Lan04")
dataFile <- read.csv(file = 'CO2_data_cut_paste.csv')
# Step 8a
setwd("~/Desktop/Classes/EBIO_5420/CompBioLabsAndHW/Lab04")
dataFile <- read.csv(file = 'CO2_data_cut_paste.csv')
View(dataFile)
View(dataFile)
