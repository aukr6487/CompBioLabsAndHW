print("Error: Invalid input. Please enter n > 0. Will return NULL")
return()
}
if (start != 0 | start != 1) {
print("Error: Invalid input. Please enter start = 1 or 0. Will return NULL.")
return()
}
if(n == 1){
return(start )
}
}
printFib(1,1)
printFib(1,0)
# Problem 3
printFib <- function(n, start) {
# Checking for invalid input arguments
if (n <= 0 ){
print("Error: Invalid input. Please enter n > 0. Will return NULL")
return()
}
if (start != 0 & start != 1) {
print("Error: Invalid input. Please enter start = 1 or 0. Will return NULL.")
return()
}
if(n == 1){
return(start )
}
}
printFib(1,0)
printFib(1,1)
printFib(1,2)
# Problem 3
printFib <- function(n, start) {
# Checking for invalid input arguments
if (n <= 0 ){
print("Error: Invalid input. Please enter n > 0. Will return NULL")
return()
}
if (start != 0 & start != 1) {
print("Error: Invalid input. Please enter start = 1 or 0. Will return NULL.")
return()
}
if(n == 1){
return(start )
}
if( n == 2 ){
if (start == 0) {
fibVector[1] <- start
fibVector[2] <- start + 1
} else {
fibVector[1], fibVector[2] <- start
}
}
}
# Problem 3
printFib <- function(n, start) {
# Checking for invalid input arguments
if (n <= 0 ){
print("Error: Invalid input. Please enter n > 0. Will return NULL")
return()
}
if (start != 0 & start != 1) {
print("Error: Invalid input. Please enter start = 1 or 0. Will return NULL.")
return()
}
if(n == 1){
return(start )
}
if( n == 2 ){
}
}
# Problem 3
printFib <- function(n, start) {
# Checking for invalid input arguments
if (n <= 0 ){
print("Error: Invalid input. Please enter n > 0. Will return NULL")
return()
}
if (start != 0 & start != 1) {
print("Error: Invalid input. Please enter start = 1 or 0. Will return NULL.")
return()
}
if(n == 1){
return(start )
}
if( n == 2 & start == 0){
fibVector[1] <- start
fibVector[2] <- start + 1
print(fibVector)
}
}
printFib(2,0)
# Problem 3
printFib <- function(n, start) {
# Checking for invalid input arguments
if (n <= 0 ){
print("Error: Invalid input. Please enter n > 0. Will return NULL")
return()
}
if (start != 0 & start != 1) {
print("Error: Invalid input. Please enter start = 1 or 0. Will return NULL.")
return()
}
if(n == 1){
return(start )
}
fibVector <- rep(NA, n) # allocate vector space
if( n == 2 & start == 0){
fibVector[1] <- start
fibVector[2] <- start + 1
print(fibVector)
}
}
printFib(2,0)
# Problem 3
printFib <- function(n, start) {
# Checking for invalid input arguments
if (n <= 0 ){
print("Error: Invalid input. Please enter n > 0. Will return NULL")
return()
}
if (start != 0 & start != 1) {
print("Error: Invalid input. Please enter start = 1 or 0. Will return NULL.")
return()
}
if (n == 1){
return(start )
}
fibVector <- rep(NA, n) # allocate vector space
if ( n == 2 & start == 0){
fibVector[1] <- start
fibVector[2] <- start + 1
print(fibVector)
}
if ( n == 2 & start == 1) {
fibVector[1], fibVector[2] <- start
}
}
# Problem 3
printFib <- function(n, start) {
# Checking for invalid input arguments
if (n <= 0 ){
print("Error: Invalid input. Please enter n > 0. Will return NULL")
return()
}
if (start != 0 & start != 1) {
print("Error: Invalid input. Please enter start = 1 or 0. Will return NULL.")
return()
}
if (n == 1){
return(start )
}
fibVector <- rep(NA, n) # allocate vector space
if ( n == 2 & start == 0){
fibVector[1] <- start
fibVector[2] <- start + 1
print(fibVector)
}
if ( n == 2 & start == 1) {
fibVector[1] <- start
fibVector[2] <- start
}
}
printFib(2,0)
printFib(2,1)
# Problem 3
printFib <- function(n, start) {
# Checking for invalid input arguments
if (n <= 0 ){
print("Error: Invalid input. Please enter n > 0. Will return NULL")
return()
}
if (start != 0 & start != 1) {
print("Error: Invalid input. Please enter start = 1 or 0. Will return NULL.")
return()
}
if (n == 1){
return(start )
}
fibVector <- rep(NA, n) # allocate vector space
if ( n == 2 & start == 0){
fibVector[1] <- start
fibVector[2] <- start + 1
return(fibVector)
}
if ( n == 2 & start == 1) {
fibVector[1] <- start
fibVector[2] <- start
return(fibVector)
}
}
printFib(2,1)
# Problem 3
printFib <- function(n, start) {
# Checking for invalid input arguments
if (n <= 0 ){
print("Error: Invalid input. Please enter n > 0. Will return NULL")
return()
}
if (start != 0 & start != 1) {
print("Error: Invalid input. Please enter start = 1 or 0. Will return NULL.")
return()
}
if (n == 1){
return(start )
}
fibVector <- rep(NA, n) # allocate vector space
if ( n == 2 & start == 0){
fibVector[1] <- start
fibVector[2] <- start + 1
return(fibVector)
}
if ( n == 2 & start == 1) {
fibVector[1] <- start
fibVector[2] <- start
return(fibVector)
}
# N >= 3, and start > 1
if (start == 0) {
fibVector[1] <- start
fibVector[2] <- start + 1
for (i in 3:n) {
fibVector[i] <- fibVector[i - 1] + fibVector[i - 2]
}
}
}
printFib(3,0)
# Problem 3
printFib <- function(n, start) {
# Checking for invalid input arguments
if (n <= 0 ){
print("Error: Invalid input. Please enter n > 0. Will return NULL")
return()
}
if (start != 0 & start != 1) {
print("Error: Invalid input. Please enter start = 1 or 0. Will return NULL.")
return()
}
if (n == 1){
return(start )
}
fibVector <- rep(NA, n) # allocate vector space
if ( n == 2 & start == 0){
fibVector[1] <- start
fibVector[2] <- start + 1
return(fibVector)
}
if ( n == 2 & start == 1) {
fibVector[1] <- start
fibVector[2] <- start
return(fibVector)
}
# N >= 3, and start > 1
if (start == 0) {
fibVector[1] <- start
fibVector[2] <- start + 1
for (i in 3:n) {
fibVector[i] <- fibVector[i - 1] + fibVector[i - 2]
}
return(fibVector)
}
}
printFib(3,0)
# Problem 3
printFib <- function(n, start) {
# Checking for invalid input arguments
if (n <= 0 ){
print("Error: Invalid input. Please enter n > 0. Will return NULL")
return()
}
if (start != 0 & start != 1) {
print("Error: Invalid input. Please enter start = 1 or 0. Will return NULL.")
return()
}
# n == 2 and start == 1 or 0
if (n == 1){
return(start )
}
fibVector <- rep(NA, n) # allocate vector space
# n == 2 and start == 0
if ( n == 2 & start == 0){
fibVector[1] <- start
fibVector[2] <- start + 1
return(fibVector)
}
# n == 2 and start == 1
if ( n == 2 & start == 1) {
fibVector[1] <- start
fibVector[2] <- start
return(fibVector)
}
# n >= 3 and start == 0
if (start == 0) {
fibVector[1] <- start
fibVector[2] <- start + 1
for (i in 3:n) {
fibVector[i] <- fibVector[i - 1] + fibVector[i - 2]
}
return(fibVector)
}
# n >= 3 and start == 1
fibVector[1] <- start
fibVector[2] <- start
for (i in 3:n) {
fibVector[i] <- fibVector[i - 1] + fibVector[i - 2]
}
return(fibVector)
}
printFib(3,1)
printFib(4,1)
printFib(20,1)
printFib(20,-1)
printFib(0,-1)
printFib(1,-1)
printFib(1,1)
printFib(1,0)
printFib(2,0)
printFib(2,1)
printFib(3,1)
printFib(3,0)
printFib(20,0)
# Problem 4
squareDiff <- function(x, y){
return(abs((x-y)^2))
}
squareDiff(3, 5)
squareDiff(c(2, 4, 6), 4)
# Problem 4
squareDiff <- function(x, y){
return( abs( (x - y) ^ 2 ) )
}
squareDiff(c(2, 4, 6), 4)
squareDiff(3, 5)
squareDiff(c(2, 4, 6), 4)
# Problem 4b
arithMean <- function(vector) {
return( sum(vector) / length(vector) )
}
arithMean( c(5, 15, 10))
setwd('~/Desktop/Classes/EBIO_5420/CompBioLabsAndHW/Lab07')
testFrame <- read.csv( "DataForLab07.csv" )
arithmean(testFrame)
arithMean(testFrame)
arithMean(testFrame)
# Problem 4b
arithMean <- function(vector) {
return( sum(vector) / (length(vector)-1) )
}
arithMean(testFrame)
# Problem 4b
arithMean <- function(vector) {
return( sum(vector) / length(vector) )
}
arithMean( c(5, 15, 10))
setwd('~/Desktop/Classes/EBIO_5420/CompBioLabsAndHW/Lab07')
testFrame <- read.csv( "DataForLab07.csv" )
arithMean(testFrame)
length(testFrame)
length(testFrame$x)
nrow(testFrame)
# Problem 4b
arithMean <- function(vector) {
return( sum(vector) / nrow(vector) )
}
arithMean( c(5, 15, 10))
return( sum(vector) / length(vector) )
# Problem 4b
arithMean <- function(vector) {
return( sum(vector) / length(vector) )
}
arithMean( c(5, 15, 10))
# Problem 4b
arithMean <- function(vector) {
dim(vector)
return( sum(vector) / length(vector) )
}
arithMean( c(5, 15, 10))
dim( c(5, 15, 10))
length(testFrame)
vector <- c(5, 15, 10)
setwd('~/Desktop/Classes/EBIO_5420/CompBioLabsAndHW/Lab07')
testFrame <- read.csv( "DataForLab07.csv" )
class(vector)
class(testFrame)
typeof(vector)
typeof(testFrame)
# Problem 4b
arithMean <- function(vector) {
if (class(vector) == "data.frame") {
vector <- as.numeric(vector)
}
return( sum(vector) / length(vector) )
}
arithMean(testFrame)
# Problem 4b
arithMean <- function(vector) {
if (class(vector) == "data.frame") {
vector <- as.numeric(vector$[,1])
}
return( sum(vector) / length(vector) )
}
arithMean(testFrame)
# Problem 4b
arithMean <- function(vector) {
if (class(vector) == "data.frame") {
vector <- vector$[1,]
}
return( sum(vector) / length(vector) )
}
arithMean(testFrame)
# Problem 4b
arithMean <- function(vector) {
if (class(vector) == "data.frame") {
vector <- vector$[,1]
}
return( sum(vector) / length(vector) )
}
arithMean(testFrame)
# Problem 4b
arithMean <- function(vector) {
if (class(vector) == "data.frame") {
vector <- vector[,1]
}
return( sum(vector) / length(vector) )
}
arithMean(testFrame)
arithMean( c(5, 15, 10) )
# Problem 4b
arithMean <- function(vector) {
if (class(vector) == "data.frame") {
vector <- vector[,1]
}
return( sum(vector) / length(vector) )
}
arithMean( c(5, 15, 10) )
setwd('~/Desktop/Classes/EBIO_5420/CompBioLabsAndHW/Lab07')
testFrame <- read.csv( "DataForLab07.csv" )
arithMean(testFrame)
sumOfSquares <- function(aVector) {
mean <- arithMean(vector)
subtractions <- squareDiff(aVector, mean)
return(sum(subtractions^2))
}
sumOfSquares(testFrame)
mean
mean <- arithMean(vector)
sumOfSquares <- function(aVector) {
mean <- arithMean(aVector)
subtractions <- squareDiff(aVector, mean)
return(sum(subtractions^2))
}
sumOfSquares(testFrame)
# Problem 4b
arithMean <- function(vector) {
if (class(vector) == "data.frame") {
vector <- vector[,1]
}
return( sum(vector) / length(vector) )
}
arithMean(testFrame)
squareDiff(aVector, arithMean(testFrame))
squareDiff(testFrame, arithMean(testFrame))
mean <- arithMean(testFrame)
mean
sumOfSquares <- function(aVector) {
if (class(aVector) == "data.frame") {
aVector <- aVector[,1]
}
mean <- arithMean(aVector)
subtractions <- squareDiff(aVector, mean)
return(sum(subtractions^2))
}
sumOfSquares(testFrame)
sumOfSquares <- function(aVector) {
if (class(aVector) == "data.frame") {
aVector <- aVector[,1]
}
mean <- arithMean(aVector)
return(squareDiff(aVector, mean))
}
sumOfSquares(testFrame)
sumOfSquares <- function(aVector) {
sumOfSquares <- function(aVector) {
if (class(aVector) == "data.frame") {
aVector <- aVector[,1]
}
mean <- arithMean(aVector)
return(sum(squareDiff(aVector, mean))
}
sumOfSquares(testFrame)
# Problem 4c
sumOfSquares <- function(data) {
squareDiff(data, arithMean(data))
}
sumOfSquares(testFrame)
# Problem 4c
sumOfSquares <- function(data) {
if (class(data) == "data.frame") {
data <- data[,1]
}
squareDiff(data, arithMean(data))
}
sumOfSquares(testFrame)
# Problem 4c
sumOfSquares <- function(data) {
if (class(data) == "data.frame") {
data <- data[,1]
}
squaredDifferences <- squareDiff(data, arithMean(data))
return( sum( squaredDifferences ) )
}
sumOfSquares(testFrame)
